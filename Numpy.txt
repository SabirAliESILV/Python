import numpy as np


a = np.array([1,2,3], dtype='int32')
print(a)


b = np.array([[9.0,8.0,7.0],[6.0,5.0,4.0]])
print(b)


a.ndim
b.shape
a.dtype
a.itemsize
a.nbytes
a.size


a = np.array([[1,2,3,4,5,6,7],[8,9,10,11,12,13,14]])
print(a)
a[1,5]
a[0,:]
a[:,2]
a[0,1:-1:2]
a[1,5] = 20
a[:,2] = [1,2]
print(a)


np.zeros((2,3))
np.ones((4,2,2),dtype='int32')
np.identity(5)


np.full((2,2),99)
np.full_like(a,4)


np.random.rand(4,2)
np.random.randint(-4,8,size=(3,3))


arr = np.array([1,2,3])
r1 = np.repeat(arr,3,axis=0)
print(r1)


arr = np.array([[1,0,1]])
print(arr)


r1 = np.repeat(arr,3,axis=0)
print(r1)


r1[1,1]=2
print(r1)


output = np.ones((5,5))
print(output)


z = np.zeros((3,3))
z[1,1] = 9
print(z)


output[1:-1,1:-1] = z
print(output)


a = np.array([1,2,3])
b = a.copy()
b[0] = 100
print(a)
print(b)


a=np.array([1,2,3,4])
b = np.array([1,0,1,0])
print(a+b)


a = np.ones((2,3))
b = np.full((3,2),2)
print(np.matmul(a,b))


d = np.random.randint(-4,2,size=(2,3))
e = np.random.randint(-5,5,size=(3,2))
print(np.matmul(d,e))
print(np.matmul(e,d))


f = np.random.randint(-10,10,size=(4,4))
g = np.random.randint(-4,10, size=(3,3))
print(np.linalg.det(f))
print(np.linalg.det(g))


stats=np.array([[1,2,3],[4,5,6]])
np.min(stats)
np.min(stats, axis=0)
np.min(stats, axis=1)
np.max(stats, axis=0)
np.sum(stats)
np.sum(stats, axis=0)


arr = np.array([[1,2,1]])
r1 = np.repeat(arr,3,axis=0)
print(r1)


arr = np.array([[1,2,1]])
r1 = np.repeat(arr,3,axis=1)
print(r1)


npoints = 21
values = np.linspace(-2.0,2.0,npoints)
print (values)


y = np.linspace(10,30,21)
y[4] = 1
print(y)


vect = np.arange(9)
print(vect)


nel = int(input("Enter the number of elements in the vector: "))
lvec = []
for i in range(nel):
  comp = input("Enter the value of component {}: ".format(i))
  lvec.append(float(comp))
vec = np.array(lvec)
print(vec)


nel = int(input("Enter the number of elements in the vector: "))
vec = np.zeros(nel)
for i in range(nel):
  comp = input("Enter the value of component {}: ".format(i))
  vec[i] = float(comp)
print(vec)


from numpy.core.overrides import verify_matching_signatures
lin = input("Enter the components of the vector: ")
smooth = lin.split()
vec = np.float_(smooth)
print(vec)


mat = np.zeros((4,3))
for i in range(4):
  for j in range(3):
    mat[i,j] = float(input("Enter the value of the element {}, {}: ".format(i,j)))
print(mat)


a = np.array([[2,3],[1,2]])
b = np.array([[1,0],[3,1]])
ab = np.matmul(a,b)
ab_invert = np.linalg.inv(ab)
ba_invert = np.matmul(np.linalg.inv(b),np.linalg.inv(a))
print("AB :\n",ab)
print("\n(AB)-1 :\n",ab_invert)
print("\n(B)-1(A)-1 :\n",ba_invert)


a = np.array([[1,1],[1,2]])
b = np.array([[4,1],[3,1]])
c = np.array([[24,7],[31,9]])
a_invert = np.linalg.inv(a)
b_invert = np.linalg.inv(b)
x = np.matmul(np.matmul(a_invert,c),b_invert)
print(x)


list = [2.07*(10**-5),2.62*(10**-7),3.22*(10**-5),2.59*(10**-4),4.87*(10**-5),1.19*(10**-4),3.95*(10**-5)]
vect = np.array(list)
vect = -1 * np.log10(vect)
print(vect)